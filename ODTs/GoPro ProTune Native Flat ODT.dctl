DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)

__DEVICE__ float linear_to_protune(float t) {
    // Protune function taken from https://nick-shaw.github.io/cinematiccolor/common-rgb-color-spaces.html
    return _logf(t * 112.0 + 1.0) / _logf(113.0);
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(
        mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
        mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
        mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z
    );
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(p_R, p_G, p_B);

    // Used values calculated from http://color.support/colorspacecalculator.html
    // Native color primaries taken from https://nick-shaw.github.io/cinematiccolor/common-rgb-color-spaces.html
    float matrix[3][3] = {
        { 1.846069, -0.615685, -0.230384},
        { 0.084278,  0.908345,  0.007377},
        {-0.087766,  0.249134,  0.838633},
    };
    float3 rgb2 = mv_33_3(matrix, rgb);

    // Estimated from some gray card exposures.
    const float gain = 1.46014;
    rgb2 /= gain;

    // Convert back to log.
    rgb2.x = linear_to_protune(rgb2.x);
    rgb2.y = linear_to_protune(rgb2.y);
    rgb2.z = linear_to_protune(rgb2.z);

    return rgb2;
}
