DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)

/**
 * ACES AP0 to Zlog2 conversion ODT.
 * Goes from scene linear, Aces AP0 gamut to Zlog 2, z-cam gamut.
 *
 * This can be used as an ODT in Resolve.
 */

__DEVICE__ inline float linear_to_zlog(float x)
{
    // Approximates official zlog2 to linear conversion LUT.
    const float a = 249.77914428710938f;
    const float b = 0.9484496712684631f;
    const float c = 0.3455176055431366f;
    const float d = 0.1709400862455368f;
    const float e = 1.3393715620040894f;
    const float f = -0.06127290427684784f;
    const float cut = -0.0652475655078888f;

    if (x > cut) {
        return (c * _log10f(a * x + b) + d);
    } else {
        return (e * x + f);
    }
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    // Calculated by inverting the matrix given by Z-Cam.
    float r2 = ( 1.71094569f * p_R) + (-0.45269318f * p_G) + (-0.17229756f * p_B);
    float g2 = (-0.02106091f * p_R) + ( 1.02314636f * p_G) + ( 0.07333446f * p_B);
    float b2 = (-0.09620104f * p_R) + ( 0.24508222f * p_G) + ( 0.90271589f * p_B);

    // Default is 8.0f
    const float gain = 3.0f;

    float r = r2 / (gain * 3.7f);
    float g = g2 / (gain * 3.7f);
    float b = b2 / (gain * 3.7f);

    r2 = linear_to_zlog(r);
    g2 = linear_to_zlog(g);
    b2 = linear_to_zlog(b);

    float3 res = to_float3(r2, g2, b2);
    return res;
}
