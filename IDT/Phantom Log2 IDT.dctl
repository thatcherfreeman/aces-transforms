// Written by Thatcher Freeman
// Based on a clip shot on a Phantom Flex4k and decoded two ways in PCC
// clang-format off
DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)
// clang-format on

__DEVICE__ float phantom_log2_to_linear(float x) {
    const float base = 521.9552001953125;
    const float offset = 0.00009969412349164486;
    const float scale = 0.00181956822052598;
    const float slope = 0.03332506865262985;
    const float intercept = -0.000293954013613984;
    const float cut = 0.1716942936182022;

    if (x < cut) {
        return slope * x + intercept;
    } else {
        return _powf(base, x) * scale + offset;
    }
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 rgb = make_float3(phantom_log2_to_linear(p_R), phantom_log2_to_linear(p_G), phantom_log2_to_linear(p_B));
    // Gain estimated to match the default Rec709 decode.
    const float gain = 3.0;
    rgb *= gain;

    // Used values calculated from https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix
    // source color space Rec709 and Output ACES AP0, with CAT02 chromatic adaptation.
    float matrix[3][3] = {
        {0.439575684216680, 0.383912589336509, 0.176511726489679},
        {0.089600382903921, 0.814714154206652, 0.095685462895180},
        {0.017415482729199, 0.108734352236674, 0.873850165033623},
    };
    float3 rgb2 = mv_33_3(matrix, rgb);
    return rgb2;
}
