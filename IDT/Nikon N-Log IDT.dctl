// clang-format off
DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)
// clang-format on

__DEVICE__ inline float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

/**
 * N-log to ACES AP0 conversion.
 * Goes from N-Log and N-Log gamut (equivalent to BT 2020)
 * to scene linear, ACES AP0 gamut.
 *
 * This can be used as an IDT in Resolve.
 */

__DEVICE__ inline float nlog_to_linear(float t) {
    const float c = 150.0f / 1023.0f;
    const float d = 619.0f / 1023.0f;
    const float e = 650.0f / 1023.0f;
    const float f = 0.0075f;
    const float cut1 = 0.32876f;         // Should be equal to ((cut2 / e)^3 - f)
    const float cut2 = 452.0f / 1023.0f; // should be equal to ((cut1 + f)^(1/3) * e)

    if (t >= cut2) {
        return _expf((t - d) / c);
    } else {
        return powf(t / e, 3.0f) - f;
    }
}

// Used values calculated from https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix
// source color space BT 2020 and Output ACES AP0, with CAT02 chromatic adaptation.
__CONSTANT__ float matrix[3][3] = {
    {0.678891150633901, 0.158868422372023, 0.162240427036943},
    {0.045570830898022, 0.860712772028847, 0.093716397078886},
    {-0.000485710351836, 0.025060195736250, 0.975425514615082},
};

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float r = nlog_to_linear(p_R);
    float g = nlog_to_linear(p_G);
    float b = nlog_to_linear(p_B);

    float r2 = (matrix[0][0] * r) + (matrix[0][1] * g) + (matrix[0][2] * b);
    float g2 = (matrix[1][0] * r) + (matrix[1][1] * g) + (matrix[1][2] * b);
    float b2 = (matrix[2][0] * r) + (matrix[2][1] * g) + (matrix[2][2] * b);

    float3 res = to_float3(r2, g2, b2);
    return res;
}