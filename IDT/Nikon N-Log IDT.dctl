DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)

__DEVICE__ inline float powf(float base, float exp) {
    return _copysignf(_powf(_fabs(base), exp), base);
}

/**
 * N-log to ACES AP0 conversion.
 * Goes from N-Log and N-Log gamut (equivalent to BT 2020)
 * to scene linear, ACES AP0 gamut.
 *
 * This can be used as an IDT in Resolve.
 */

__DEVICE__ inline float nlog_to_linear(float t)
{
    const float c = 150.0f / 1024.0f;
    const float d = 619.0f / 1024.0f;
    const float e = 650.0f / 1024.0f;
    const float f = 0.0075f;
    const float cut1 = 0.32876f; // Should be equal to ((cut2 / e)^3 - f)
    const float cut2 = 452.0f / 1024.0f; // should be equal to ((cut1 + f)^(1/3) * e)

    if (t >= cut2) {
        return _expf((t - d) / c);
    } else {
        return powf(t / e, 3.0f) - f;
    }
}

// Used values calculated from http://color.support/colorspacecalculator.html
// source color space BT 2020 and Output ACES AP0, with Bradford chromatic adaptation.
__CONSTANT__ float matrix[9] = {
     0.679086f, 0.157701f, 0.163213f,
     0.046002f, 0.859055f, 0.094943f,
    -0.000574f, 0.028468f, 0.972106f,
};

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float r = nlog_to_linear(p_R);
    float g = nlog_to_linear(p_G);
    float b = nlog_to_linear(p_B);

    float r2 = ( matrix[0] * r) + ( matrix[1] * g) + ( matrix[2] * b);
    float g2 = ( matrix[3] * r) + ( matrix[4] * g) + ( matrix[5] * b);
    float b2 = ( matrix[6] * r) + ( matrix[7] * g) + ( matrix[8] * b);

    float3 res = to_float3(r2, g2, b2);
    return res;
}