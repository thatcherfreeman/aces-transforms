// clang-format off
DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)
// clang-format on

/**
 * Leica L-Log to ACES AP0 conversion.
 * Goes from L-Log and BT2020 gamut
 * to scene linear, ACES AP0 gamut.
 *
 * This can be used as an IDT in Resolve.
 */

__DEVICE__ float llog_to_linear(float t) {
    const float a = 8;
    const float b = 0.09f;
    const float c = 0.27f;
    const float d = 1.3f;
    const float e = 0.0115f;
    const float f = 0.6f;
    const float cut1 = 0.006f;
    const float cut2 = 0.1380f;

    float out;
    if (t >= cut2) {
        out = ((_exp10f((t - f) / c) - e) / d);
    } else {
        out = ((t - b) / a);
    }
    return out;
}

// Used values calculated from https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix
// source color space BT 2020 and Output ACES AP0, with CAT02 chromatic adaptation.
__CONSTANT__ float matrix[3][3] = {
    {0.678891150633901f, 0.158868422372023f, 0.162240427036943f},
    {0.045570830898022f, 0.860712772028847f, 0.093716397078886f},
    {-0.000485710351836f, 0.025060195736250f, 0.975425514615082f},
};

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float r = llog_to_linear(p_R);
    float g = llog_to_linear(p_G);
    float b = llog_to_linear(p_B);

    float r2 = (matrix[0][0] * r) + (matrix[0][1] * g) + (matrix[0][2] * b);
    float g2 = (matrix[1][0] * r) + (matrix[1][1] * g) + (matrix[1][2] * b);
    float b2 = (matrix[2][0] * r) + (matrix[2][1] * g) + (matrix[2][2] * b);

    float3 res = make_float3(r2, g2, b2);
    return res;
}