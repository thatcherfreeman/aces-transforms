// clang-format off
DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)
// clang-format on

/**
 * ACES AP0 to F-LOG conversion.
 * Goes from scene linear, ACES AP0 gamut
 * to F-Log and F-Log gamut (equivalent to BT 2020 gamut).
 *
 * This can be used as an ODT in Resolve.
 */

__DEVICE__ inline float linear_to_flog(float x) {
    const float a = 0.555556f;
    const float b = 0.009468f;
    const float c = 0.344676f;
    const float d = 0.790453f;
    const float e = 8.735631f;
    const float f = 0.092864f;
    const float cut1 = 0.00089f;           // Should be equal to ((cut2 - f) / e)
    const float cut2 = 0.100537775223865f; // should be equal to (e * cut1 + f)

    if (x >= cut1) {
        return (c * _log10f(a * x + b) + d);
    } else {
        return (e * x + f);
    }
}

// Used inverse of matrix from the IDT.
__CONSTANT__ float matrix[3][3] = {
    {1.490868704657009f, -0.268712979082956f, -0.222155725704626f},
    {-0.079237210602833f, 1.179368583111103f, -0.100131372460806f},
    {0.002778100767079f, -0.030433614631534f, 1.027655513912370f},
};

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float r = (matrix[0][0] * p_R) + (matrix[0][1] * p_G) + (matrix[0][2] * p_B);
    float g = (matrix[1][0] * p_R) + (matrix[1][1] * p_G) + (matrix[1][2] * p_B);
    float b = (matrix[2][0] * p_R) + (matrix[2][1] * p_G) + (matrix[2][2] * p_B);

    float r2 = linear_to_flog(r);
    float g2 = linear_to_flog(g);
    float b2 = linear_to_flog(b);

    float3 res = make_float3(r2, g2, b2);
    return res;
}
