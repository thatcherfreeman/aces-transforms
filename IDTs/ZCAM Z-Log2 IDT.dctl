DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)

/**
 * Zlog2 to ACES AP0 conversion.
 * Goes from Zlog2 and z-cam gamut to scene linear, ACES AP0 gamut.
 *
 * This can be used as an IDT in Resolve.
 */

__DEVICE__ inline float zlog_to_linear(float t)
{
    const float a = 249.77914428710938f;
    const float b = 0.9484496712684631f;
    const float c = 0.3455176055431366f;
    const float d = 0.1709400862455368f;
    const float e = 1.3393715620040894f;
    const float f = -0.06127290427684784f;
    const float cut = -0.0652475655078888f;

    if (t > (e * cut + f)) {
        return ((_exp10f((t - d) / c) - b) / a);
    } else {
        return ((t - f) / e);
    }
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float r = zlog_to_linear(p_R);
    float g = zlog_to_linear(p_G);
    float b = zlog_to_linear(p_B);

    // Default is 8.0
    // I've set this value to 2.5 because that's what
    // maps 40% in zlog2 to 0.18 (middle gray). Exposing middle gray to
    // 40% is the official Z-Cam recommendation.
    const float gain = 2.5f;

    float r2 = r * gain * 3.7f;
    float g2 = g * gain * 3.7f;
    float b2 = b * gain * 3.7f;

    // Rows add up to less than 1 for some reason, which results in the
    // gain being increased to make up for it. This matrix was provided by
    // the official Z-CAM IDT.
    r = ( 0.59268922f * r2) + ( 0.23980554f * g2) + ( 0.09364286f * b2);
    g = ( 0.00782530f * r2) + ( 0.99994013f * g2) + (-0.07973914f * b2);
    b = ( 0.06103745f * r2) + (-0.24592234f * g2) + ( 1.13939635f * b2);

    float3 res = to_float3(r, g, b);
    return res;
}
